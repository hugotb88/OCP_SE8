Bounds
By now, you might have noticed that generics don’t seem particularly useful since they are
treated as Objects and therefore don’t have many methods available. Bounded wildcards
solve this by restricting what types can be used in that wildcard position.
A bounded parameter type is a generic type that specifies a bound for the generic. Be
warned that this is the hardest section in the chapter, so don’t feel bad if you have to read it
more than once.
A wildcard generic type is an unknown generic type represented with a question mark
(?). You can use generic wildcards in three ways, 


Type of Bound							Syntax				Example

Unbounded wildcard 						? 					List<?> l =new ArrayList<String>();

Wildcard with an upper bound 			? extends type 		List<? extends Exception> l =new ArrayList<RuntimeException>();

Wildcard with a lower bound 			? super type 		List<? super Exception> l =new ArrayList<Object>();

