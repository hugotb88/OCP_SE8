The syntax of lambda expressions is tricky because many parts are optional. These two
lines are equivalent and do the exact same thing:
 a -> a.canHop()
 
 Lambda syntax, including optional parts
  
 (Animal a) -> { return a.canHop(); }
 
 
 Let’s review some of the differences between these two figures. The first difference
that you may notice is that Figure 2.2 uses parentheses (), while Figure 2.1 does not.
The parentheses () can be omitted in a lambda expression if there is exactly one input
parameter and the type is not explicitly stated in the expression. This means that
expressions that have zero or more than one input parameter will still require parentheses
 
Another examples of valid lambdas

() -> new Duck()
d -> {return d.quack();}
(Duck d) -> d.quack()
(Animal a, Duck d) -> d.quack()


Now let’s look at some lambda expressions that take more than one parameter:

(a, b) -> a.startsWith("test") // 2 parameters
(String a, String b) -> a.startsWith("test") // 2 parameters

 Do you see what’s wrong with each of these lambda expressions?
 
a, b -> a.startsWith("test") // DOES NOT COMPILE
c -> return 10; // DOES NOT COMPILE
a -> { return a.startsWith("test") } // DOES NOT COMPILE

The first lambda needs parentheses () around the parameter list. Remember that the
parentheses are optional only when there is one parameter and it doesn’t have a type
declared. The second line uses the return keyword without using braces {}. The last line is
missing the semicolon after the return statement. The following rewritten lambda expressions
are each valid:

(a, b) -> a.startsWith("test")
c -> { return 10; }
a -> { return a.startsWith("test"); }

Another examples

(y, z) -> {int x=1; return y+10; }
(String s, int z) -> { return s.length()+z; }
(a, b, c) -> a.getName()


There is one more issue you might see with lambdas. We’ve been defining an argument
list in our lambda expressions. Since Java doesn’t allow us to redeclare a local variable, the
following is an issue:

(a, b) -> { int a = 0; return 5;} // DOES NOT COMPILE

We tried to re declare a, which is not allowed. By contrast, the following line is
permitted because it uses a different variable name:

(a, b) -> { int c = 0; return 5;}