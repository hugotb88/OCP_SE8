When code doesn’t work as expected, it is traditional to add a println() or set a breakpoint
to see the values of an object. With streams, this is trickier. Since intermediate operations
don’t run until needed, and Java is free to make them more efficient, new techniques
are needed. Table 4.5 shows some options for printing out the contents of a stream. You’ll
find that you have less need to print out the values of a stream as you get more practice
with stream pipelines. While learning, printing is really helpful!

Option                                      Works for Infinite                      Destructive to
                                            Streams?                                Stream?
-----------------------------------------------------------------------------------------------------------

s.forEach(System.out::println);                 No                                      Yes

System.out.println(s.collect(Collectors.        No                                      Yes
toList()));

s.peek(System.out::println).count();            No                                      No

s.limit(5).forEach(System.out::println);        Yes                                     Yes



Notice that most of the approaches are destructive. This means that you cannot use the
stream anymore after printing. This is fine when you are getting started and just want to
see what the code does. It’s a problem if you are trying to find out what a stream looks like
as it passes through a certain part of the pipeline.
Also, notice that only one of the approaches works for an infinite stream. It limits the
number of elements in the stream before printing. If you try the others with an infinite
stream, they will run until you kill the program.