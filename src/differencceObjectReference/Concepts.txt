In Java, all objects are accessed by reference, so as a developer you never have direct access
to the memory of the object itself. Conceptually, though, you should consider the object
as the entity that exists in memory, allocated by the Java runtime environment. Regardless
of the type of the reference that you have for the object in memory, the object itself
doesn’t change. 
For example, since all objects inherit java.lang.Object, they can all be
reassigned to java.lang.Object, as shown in the following example:

Lemur lemur = new Lemur();
Object lemurAsObject = lemur;

Object lemurAsObject = lemur;

Even though the Lemur object has been assigned a reference with a different type,
the object itself has not changed and still exists as a Lemur object in memory. What
has changed, then, is our ability to access methods within the Lemur class with the
lemurAsObject reference. Without an explicit cast back to Lemur, as you’ll see in the next
section, we no longer have access to the Lemur properties of the object.
We can summarize this principle with the following two rules:

1. The type of the object determines which properties exist within the object in memory.
2. The type of the reference to the object determines which methods and variables are
accessible to the Java program.

It therefore follows that successfully changing a reference of an object to a new reference
type may give you access to new properties of the object, but those properties existed before
the reference change occurred


//Casting Object References

Primate primate = lemur;
Lemur lemur2 = primate; // DOES NOT COMPILE
Lemur lemur3 = (Lemur)primate;
System.out.println(lemur3.age);

In this example, we first try to convert the primate reference back to a lemur reference,
lemur2, without an explicit cast. The result is that the code will not compile. In the second
example, though, we explicitly cast the object to a subclass of the object Primate, and we
gain access to all the methods available to the Lemur class.
Here are some basic rules to keep in mind when casting variables:

1. Casting an object from a subclass to a superclass doesn’t require an explicit cast.
2. Casting an object from a superclass to a subclass requires an explicit cast.
3. The compiler will not allow casts to unrelated types.
4. Even when the code compiles without issue, an exception may be thrown at runtime if
the object being cast is not actually an instance of that class.


////////////////
Casting is not without its limitations. Even though two classes share a related hierarchy,
that doesn’t mean an instance of one can automatically be cast to another. Here’s an
example:

public class Rodent {
}
public class Capybara extends Rodent {
 public static void main(String[] args) {
 Rodent rodent = new Rodent();
 Capybara capybara = (Capybara)rodent; // Throws ClassCastException at
// runtime
 }
}

This code creates an instance of Rodent and then tries to cast it to a subclass of
Rodent, Capybara. Although this code will compile without issue, it will throw a
ClassCastException at runtime since the object being referenced is not an instance of the
Capybara class. As you may recall from Chapter 1, you can use the instanceof operator
prior to casting the object to avoid throwing ClassCastException at runtime:

if(rodent instanceof Capybara) {
 Capybara capybara = (Capybara)rodent;
}

