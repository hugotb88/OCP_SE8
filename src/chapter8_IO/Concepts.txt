A file is record within a file system that stores user and system data. Files are organized
using directories. A directory is a record within a file system that contains files as well
as other directories. For simplicity, we often refer to a directory reference as a file record
throughout this chapter, since it is stored in the file system with a unique name and with
attributes similar to a file. For example, a file and directory can both be renamed with the
same operation. Finally, the root directory is the topmost directory in the file system, from
which all files and directories inherit. In Windows, it is denoted with a drive name such as
c:\, while on Linux it is denoted with a single forward slash /.


Creating a File Object
A File object often is initialized with String containing either an absolute or relative path
to the file or directory within the file system. The absolute path of a file or directory is the
full path from the root directory to the file or directory, including all subdirectories that
contain the file or directory. Alternatively, the relative path of a file or directory is the path
from the current working directory to file or directory.

exists()                     Returns true if the file or directory exists.
getName()                    Returns the name of the file or directory denoted by this path.
getAbsolutePath()            Returns the absolute pathname string of this path.
isDirectory()                Returns true if the file denoted by this path is a directory.
isFile()                     Returns true if the file denoted by this path is a file.
length()                     Returns the number of bytes in the file. For performance reasons, the
                             file system may allocate more bytes on disk than the file actually uses.
lastModified()               Returns the number of milliseconds since the epoch when the file
                             was last modified.
delete()                     Deletes the file or directory. If this pathname denotes a directory,
                             then the directory must be empty in order to be deleted.
renameTo(File)               Renames the file denoted by this path.
mkdir()                      Creates the directory named by this path.
mkdirs()                     Creates the directory named by this path including any nonexistent
                             parent directories.
getParent()                  Returns the abstract pathname of this abstract pathname’s parent
                             or null if this pathname does not name a parent directory.
listFiles()                  Returns a File[] array denoting the files in the directory.




----------------------------------------------------------------------------
Streams

 The contents of a fi le may be accessed or written via a stream , which is a list of data elements
presented sequentially. Streams should be conceptually thought of as a long, nearly never-ending
“stream of water” with data presented one “wave” at a time.


Byte Streams vs. Character Streams
The java.io API defines two sets of classes for reading and writing streams: those with
Stream in their name and those with Reader/Writer in their name. For example, the
java.io API defines both a FileInputStream class as well as a FileReader class, both of
which define a stream that reads a file. The difference between the two classes is based on
how the stream is read or written.
Differences between Streams and Readers/Writers
1. The stream classes are used for inputting and outputting all types of binary or byte
data.
2. The reader and writer classes are used for inputting and outputting only character and
String data



Input and Output
Most Input stream classes have a corresponding Output class and vice versa. For example,
the FileOutputStream class writes data that can be read by a FileInputStream. If you
understand the features of a particular Input or Output stream class, you should naturally
know what its complementary class does


Low-Level vs. High-Level Streams
Another way that you can familiarize yourself with the java.io API is by segmenting
streams into low-level and high-level streams.
A low-level stream connects directly with the source of the data, such as a file, an array,
or a String. Low-level streams process the raw data or resource and are accessed in a
direct and unfiltered manner. For example, a FileInputStream is a class that reads file data
one byte at a time.
Alternatively, a high-level stream is built on top of another stream using wrapping.
Wrapping is the process by which an instance is passed to the constructor of another
class and operations on the resulting instance are filtered and applied to the original
instance.



Stream Base Classes
The java.io library defines four abstract classes that are the parents of all stream classes
defined within the API: InputStream, OutputStream, Reader, and Writer.


Review of java.io Class Properties
■ A class with the word InputStream or OutputStream in its name is used for reading or
writing binary data, respectively.
■ A class with the word Reader or Writer in its name is used for reading or writing
character or string data, respectively.
■ Most, but not all, input classes have a corresponding output class.
■ A low-level stream connects directly with the source of the data.
■ A high-level stream is built on top of another stream using wrapping.
■ A class with Buffered in its name reads or writes data in gro