Functional								Return			Single Abstract	
Interfaces			#Parameters			Type			Method			
-------------------------------------------------------------------------                                        
Supplier<T>				0           	T    			get
		                                
Consumer<T>				1(T)            void			accept
	                                    
BiSupplier<T,U>			2(T, U)         void			accept
	                                    
Predicate<T>			1(T)            boolean			test
                                        
BiPredicate<T, U>       2(T, U)         boolean			test
                                        
Function<T, R>          1(T)            R				apply
                                        
BiFunction<T, U, R>		2(T, U)         R				apply
                                        
UnaryOperator<T>        1(T)            T				apply
											
BynaryOperator<T>       2(T, T)         T				apply



----Function and BiFunction----
A Function is responsible for turning one parameter into a value of a potentially different
type and returning it. Similarly, a BiFunction is responsible for turning two parameters
into a value and returning it. Omitting any default or static methods, the interfaces are
defined as the following:

@FunctionalInterface public class Function<T, R> {
 R apply(T t);
}

@FunctionalInterface public class BiFunction<T, U, R> {
 R apply(T t, U u);
}