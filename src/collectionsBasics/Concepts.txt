A collection is a group of objects contained in a single object. The Java Collections
Framework is a set of classes in java.util for storing collections. There are four main
interfaces in the Java Collections Framework:

** List: A list is an ordered collection of elements that allows duplicate entries. Elements
in a list can be accessed by an int index.

** Set: A set is a collection that does not allow duplicate entries.

** Queue: A queue is a collection that orders its elements in a specific order for processing.
A typical queue processes its elements in a first-in, first-out order, but other orderings
are possible.

** Map: A map is a collection that maps keys to values, with no duplicate keys allowed.
The elements in a map are key/value pairs.

The Collection interface is the root of all collections except maps.

//Common Collections Methods
add();
remove();
isEmpty();
size();
clear();
contains();



Array is not part of Collections.
ArrayList implements the interface List.
ArrayList can't contain primitives.


//Diamond Operator <>
Before Java 5 came out, you had to write code like the following
and hope that programmers remembered that you wanted only String objects in there:

List names = new ArrayList();

This required a bit of mind reading. You had no way of knowing names were expected to
contain String objects rather than StringBuilder or something else. In Java 5, you could 
actually document this assumption in code through a new feature called generics! The
compiler even helps enforce this assumption for you:

List<String> names = new ArrayList<String>();

When Java 7 came out, its developers made it even better. The previous statement
required you to type six extra characters (String). Java 7 lets you shorten it a bit:

List<String> names = new ArrayList<>();

The shortened form uses the diamond operator. It is called that because <> looks like a
diamond if you tilt your head to the side.
You may laugh a bit about saving six characters. The diamond operator becomes more helpful
if you have more complex code. 

//null elements
This means that TreeSet cannot contain null elements. It also means that TreeMap
cannot contain null keys. Null values are OK.
